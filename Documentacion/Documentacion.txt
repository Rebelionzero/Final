Documentacion del desarrollo y funcionalidades de Shop Smart
Programacion III - PHP Orientado a objetos - Nicolas Alejandro Dezzutto

--------------------------------------------
DSS-001 - Clases
DSS-002 - Controladores
DSS-003 - Vistas
DSS-004 - Pruebas Unitarias y Code Coverage
DSS-005 - Front End
DSS-006 - Faltantes
--------------------------------------------

*****************************************************************************************************************
El objeto de este archivo es documentar y seguir el desarrollo de la aplicacion en base al comportamiento, atributos, metodos y funcionamiento de sus clases.
(En el momento de documentar no se cuentan los metodos constructores, se hará notacion de aquellos que posean ciertos atributos distintivos)

--------------------------------------------
DSS-001 - Clases
--------------------------------------------


/**********************/
 BorrarBD:
/**********************/

Controladores: borrar_db.php

Atributos: tabla, id, nombre, respuesta, conectar

Funcion del objeto: Identificar los distintos elementos a ser borrados de la base de datos y borrarlos con exito utilizando para ello a otros objetos.

Clases con las que interactua: Queries.php

Vistas con las que interactua: - Ninguna - 

Metodos:
*borrar_bd:
	-Diferenciar el tipo de tabla de la cual se va a realizar la eliminacion en la base de datos y:

	1) En el caso de que la tabla sea de marcas o categorias, se crea y ejecuta la query (mediante la clase Queries) que verifique que en la base de datos la marca o categoria a borrar no se encuentre siendo utilizada por un producto. De ser así se crea un error mostrando la cantidad de productos que utilizan esa marca o categoria, siendo estos la razón por la cual no puede ser borrada. En el caso de no estar siendo utilizada, se crea y ejecuta la query que borra la marca/categoria de la base. En ambos casos se utiliza el atributo respuesta para retornar una respuesta a traves del controlador.

	2) En el caso de que la tabla sea productos se crea y ejecuta la query de src para luego utilizar el resultado para borrar la imagen de la carpeta correspondiente. Ademas de crear y ejecutar la query para borrar el producto de la base de datos. En ambos casos se genera un mensaje de respuesta que se envia al controlador correspondiente.

Faltantes de esta clase:
- manejo de errores para el Log
- comprobacion de que se borró correctamente (Linea 42 y 43)
- comprobacion de que se selecciono el src correctamente y de que el producto existe.
-code review

/**********************/
 ComprobarProducto:
/**********************/

Controladores: procesar.php

Atributos: nombre, precio,categoria, marca, descripcion, imagen, validaciones, vacios, errores

Clases con las que interactua: Editar.php

Vistas con las que interactua: - Ninguna -

Metodos: 

 Publicos:
 *verificar:
		- contiene 2 de los atributos/arrays: validaciones y vacios
		- llama al metodo privado saetear_errores
		- la funcion de este metodo es almacenar en los arrays los llamados a las funciones privadas, los cuales devuelven la verificacion correspondiente

		1) validaciones almacena los resultados de las comprobaciones segun el tipo de informacion que se busca verificar, ej: si la informacion que se le pasa contiene el limite de caracteres necesarios para su aprobacion.

		2) vacios almacena los booleanos devueltos en cada una de las comprobaciones de los strings vacios o no vacios enviados.

		3) el llamado a setear_errores envia el contenido del array validaciones.

Privados: 

// todos los metodos privados a excepcion de setear_errores devuelven false si no existe ningun error de comprobación, si existe un error en la comprobacion se envia un mensaje de error.

*vacio: se le envia un valor y este comprueba si dicho valor está vacio o no.

*sinImagen: se le envia el array de la imagen cargada, y verifica si el campo de imagen está vacio al comrobar el valor numerico del indice 'error' es igual a 4, lo cual verificaria que no se cargó una imagen. 

*setear_errores:
		- se le envia el array validaciones con las comprobaciones hechas por los metodos privados dedicados a cada campo
		- el metodo verifica el array valor por valor, chequeando que dicho valor sea falso:

		1) si es falso significa que no hubo ningun error en la validacion, y que el dato ingresado esta dentro de los limites (largo de string, ausencia de caracteres extraños, etc).

		2) si no es falso, significa que hubo un error y dicho error se insaerta en el array errores, el cual se devuelve al front end y se muestra como mensaje de error al usuario.

*validar_producto:
		- comprueba el largo del string que corresponde al nombre del producto, y lo pasa por una expresion regular la cual solo permite texto sin numeros ni espacios como nombre:

		1) Si es mayor o menor al largo requerido o si se ingresan caracteres extraños se devuelve un mensaje de error

		2) si el string ingresado cumple con los requisitos se devuelve false

*validar_precio:
		- comprueba si el valor ingresado es un numero, sustrae el valor entero de ese numero y comprueba si es mayor o menor a lo especificado, de no cumplir los requisitos envia un error, sino devuelve false

*validar_descripcion:
		- se utiliza la funcion trim para quitar espacios en blanco al inicio y al final del string, y se verifica que el largo del string no supere los 200 caracteres. De ser asi se envia un error, sino false.

*validar_select:
		- comprueba que el valor del select enviado sea distinto a 'seleccionar', si es igual a 'seleccionar' significa que el cliente no eligió ninguna categoria o marca.

*validar_img:
		- se valida que se haya subido un archivo a traves del valor del indice 'error' del array del archivo.
		- se verifica que la extension del archivo sea correcta (jpg, gif, png, jpeg), asi limitando el tipo de archivo a solo imagenes.
		- se comprueba que el tamaño de la imagen sea inferior a 2 Mb.



Faltantes de esta clase: 
- cambiar el nombre de la clase a Verificaciones
- agregar todas las comprobaciones importantes
- cambiar las comprobaciones de cada campo, se debe buscar algo especifico y no un campo especifico, investigar como pasar los requisitos como parametros a los metodos privados, ej miFuncion(3,17) /* minimo de caracteres 3 y maximo 17 */
- cambiar las expresiones regulares para aceptar espacios y numeros
- a esta clase se debe llamar desde el controlador antes que a las otras, ej: BorrarBD, Productos, Editar, etc. Asi se evita la creacion de objetos innecesariamente. Y si la verificacion es correcta recien ahí llamar al objeto para borrar, editar, crear, etc.


/**********************/
 Conexion.php:
/**********************/

Controladores: - Ninguno -

Atributos: server, usr, pass, db, conexion

Clases con las que interactua: Queries.php

Vistas con las que interactua: admin.php

Metodos: (en esta clase el metodo contruct recibe como argumentos los parametros como valores predeterminados, en el caso de querer realizar una conexion diferente)

 *conectar_bd:
 		- utiliza la funcion nativa de php mysql_connect para conectarse a un servidor.
 		- utiliza la funcion nativa de php mysql_select_db para conectarse a una base de datos utilizando la conexion anteriormente establecida.
 		- en el caso de que ocurra un error al conecctarse al servidor o a la base de datos se crea un error.

Faltantes de esta clase:
- manejo de errores: no se como manejar los errores de conexion a la base de datos, revisar la posibilidad del manejo de error con $this->conexion cuando conecta al servidor
- mejorar el manejo de errores de la conexion al servidor.
- crear la redireccion desde un llamado a la clase header en el caso de los errores de conexion al servidor y de seleccion de base de datos.

/**********************/
 :
/**********************/

Controladores: 

Atributos: 

Clases con las que interactua: 

Vistas con las que interactua:

Metodos: 

Faltantes de esta clase:


/**********************/
 :
/**********************/

Controladores: 

Atributos: 

Clases con las que interactua: 

Vistas con las que interactua:

Metodos: 

Faltantes de esta clase:


/**********************/
 :
/**********************/

Controladores: 

Atributos: 

Clases con las que interactua: 

Vistas con las que interactua:

Metodos: 

Faltantes de esta clase:


/**********************/
 :
/**********************/

Controladores: 

Atributos: 

Clases con las que interactua: 

Vistas con las que interactua:

Metodos: 

Faltantes de esta clase:



--------------------------------------------
DSS-002 - Controladores
--------------------------------------------



--------------------------------------------
DSS-003 - Vistas
--------------------------------------------



--------------------------------------------
DSS-004 - Pruebas Unitarias y Code Coverage 
--------------------------------------------



--------------------------------------------
DSS-005 - Front End
--------------------------------------------



--------------------------------------------
DSS-006 - Faltantes
--------------------------------------------

/**********************/
  General:
/**********************/

- TRANSFORMAR SHOP SMART EN UN SISTEMA DE CARGA DE IMAGENES PARA SER VISTAS DESDE UN CARRUSEL TIPO OBRAS DE ARTE. BASARME EN EL CONCEPTO DEL EXAMEN EN QUE LABURECON TICHO Y JUANMA PARA LA CLASE DE RICARDO RODRIGUEZ!!!
- Agregar una parte al backend (Igual que marcas y categorias) llamada Formato. Esta serviria para alterar el especto de la pagina desde el backend
- Categorias deberian estar limitados a ciertos parametros (Impresionismo, surrealismo, etc).
- Marcas deberia ser llamado Autor
- En autor se debe seleccionar al autor e ingresar la informacion de dicho autor.
- Productos deberia ser Obras y deberia permitir mostrar variaciones (ej: mostrar o no el autor, o hacerlo bajo un seudonimo), mostrar el año, una descripcion, titulo y contacto al autor o al museo para adquirir dicha pintura.
- Cambiar la base de datos

/**********************/
  PHP:
/**********************/

- Integrar el Login
- Problema:
	Paso 1: Entrar al sitio
	Paso 2: Cambiar el nombre de la base de datos para llegar a la excepcion de la clase Conexion
	Paso 3: Ir a cualquier seccion del sitio que tenga info de la base
	
	Resultado: No se presenta la excepcion y retorna a ajax la respuesta, pero al ingresar al sitio con el nombre de la base cambiado si entra en la excepcion!!!
	
- Concepto de conexion y selecicon de base de datos esta mal.
- Falta seguridad y front end.
- El usuario deberia saber de los errores de conexion, si falla esta, etc.
- No deberia enviar informacion de base de datos (nombre de tabla) por post y get.
- El error de conexion a a base deberia tener los estilos y funcionamiento correctos
- Aplicar private, protected, public, excepciones, interfaces, etc a los objetos
- Pruebas unitarias
- Code coverage
- rehacer el codigo html para reutilizar y usar menos javascript
- repensar cada clase y como hacer para interactuar unas con otras de forma mas eficiente
- aplicar los llamados a la clase error en toas las otras clases
- crear la clase header para manejar las redirecciones. (es posible que al redirigir con header no sea conveniente pasarle un parametro de mensaje)
- revisar por que en la clase Error.php no se crea bien el html del mensaje de error.
- editar la clase error para que maneje errores de tipo error a la conexion de la base de datos, usuario o password incorrectos, etc. (Ahora solo maneja errores de tipo falta de archivos y creacion de log de errores)
- Manejo de errores en clase Queries en caso de que la consulta devuelva false (o sea la devolucion sea algo distinto a un recurso mysql)
- Revisar si existe beneficio al usar un tipo de usuario o no
- Revisar la sentenia del login en caso de que todo este bien, linea 10

/**********************/
  Javascript:
/**********************/

- El formulario si devuelve error deberia seguir lleno y no borrarse
- Reutilizar codigo: Ej: for para crear los divs
- Rehacer el javascript para no utilizar tanto codigo

/**********************/
  Ajax:
/**********************/

- Asumo que sale todo bien y deberia revisar los pedidos en los estados anteriores al 4 de ajax.

/**********************/
  Documentacion:
/**********************/
- Transformar este documento en un documento html/css/js
- Terminar la documentacion
- Crear la documentacion de las clases Error, Login y Header
- Al terminar el sitio enteramente revisar que la documentacion esté completa